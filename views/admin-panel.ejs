<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Panel</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
    }

    header {
      background-color: #333;
      color: #fff;
      padding: 10px;
      text-align: center;
    }

    .container {
      max-width: 800px;
      margin: 20px auto;
      background-color: #fff;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
      background-color: #333;
      color: #fff;
      text-align: center;
      border-radius: 2px;
      padding-top: 2px;
      padding-bottom: 5px;
      padding-left: 2px;
      padding-right: 2px;
      margin-top: 30px;
    }

    .modal-body {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px; 
  }

  .modal-body label {
    margin-bottom: 5px;
  }

  .modal-body input {
    padding: 8px;
    margin-bottom: 10px;
  }

    .bot-info {
      margin-bottom: 20px;
    }

    button {
      background-color: #333;
      color: #fff;
      padding: 10px;
      border: none;
      cursor: pointer;
      margin-right: 10px;
    }

    button:hover {
      background-color: #555;
    }

    .blocked-user-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    max-height: 80vh;
    max-width: 80vw; 
    width: auto;
    overflow-y: auto; 
  }

    .close {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
      font-size: xx-large;
    }

    .updateBtn {
      margin-top: 5px;
    }

    #newApiKey {
      padding: 10px;
    }

    .user-container {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 10px;
    }

    .user-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      background-color: #fff;
    }

    .block-btn,
    .unblock-btn {
      background-color: #333;
      color: #fff;
      padding: 8px;
      border: none;
      cursor: pointer;
    }

    .block-btn:hover,
    .unblock-btn:hover {
      background-color: #555;
    }

    .delete-btn {
    background-color: #d9534f; 
    color: #fff;
    padding: 8px;
    border: none;
    cursor: pointer;
  }

  .delete-btn:hover {
    background-color: #c9302c; 
  }

  </style>
</head>

<body>
  <header>
    <h1>Admin Panel</h1>
  </header>
  <div class="container">
    <div class="bot-info">
      <h2>Bot Information</h2>
      <p>
        <%= botInfo %>
      </p>
    </div>
    <div class="user-container">
      <% for (let user of users) { %>
        <div class="user-info">
          <span>User ID: <%= user.userId %></span>
          <% if (user.blocked) { %>
            <button data-user-id="<%= user.userId %>" onclick="unblockUser('<%= user.userId %>')" class="unblock-btn">Unblock</button>
          <% } else { %>
            <button data-user-id="<%= user.userId %>" onclick="blockUser('<%= user.userId %>')" class="block-btn">Block</button>
          <% } %>
          <button data-user-id="<%= user.userId %>" onclick="deleteUser('<%= user.userId %>')" class="delete-btn">Delete User</button>
        </div>
      <% } %>
    </div>
    <div>
      <button onclick="openModal('changeApiKeyModal')">
        Change Bot Settings
      </button>
      <button onclick="openModal('blockedUsersModal')">
        Get All Blocked Users
      </button>
    </div>

    <div id="changeApiKeyModal" class="modal" onclick="closeModal('changeApiKeyModal')">
      <div class="modal-content" onclick="event.stopPropagation();">
        <span class="close" onclick="closeModal('changeApiKeyModal')">&times;</span>
        <div class="modal-header">
          <h2>Change API Keys</h2>
        </div>
        <div class="modal-body">
          <div>
            <h3>Update Telegram API Key</h3>
            <p id="existing-telegram-api">Existing Telegram API Key: <%= process.env.TELEGRAM_API_TOKEN %></p>
            <label for="newTelegramApiKey">New Telegram API Key:</label>
            <input type="text" id="newTelegramApiKey" name="newTelegramApiKey" />
            <button class="updateBtn" onclick="updateApiKeys('newTelegramApiKey', 'existing-telegram-api')">Update Telegram API Key</button>
          </div>
          <div>
            <h3>Update Weather API Key</h3>
            <p id="existing-weather-api">Existing Weather API Key: <%= process.env.WEATHER_API_KEY %></p>
            <label for="newWeatherApiKey">New Weather API Key:</label>
            <input type="text" id="newWeatherApiKey" name="newWeatherApiKey" />
            <button class="updateBtn" onclick="updateApiKeys('newWeatherApiKey', 'existing-weather-api')">Update Weather API Key</button>
          </div>
        </div>
      </div>
    </div>
    
    
    

    <div id="blockedUsersModal" class="modal" onclick="closeModal('blockedUsersModal')">
      <div class="modal-content" onclick="event.stopPropagation();">
        <span class="close" onclick="closeModal('blockedUsersModal')">&times;</span>
        <div class="modal-body" id="blockedUsersList">
        </div>
      </div>
    </div>


  <script>
    function openModal(modalId) {
      const modalElement = document.getElementById(modalId);

      if (modalId === 'blockedUsersModal') {
        console.log("if works")
        getBlockedUsers();
      }

      modalElement.style.display = 'block';
    }

    function closeModal(modalId) {
      console.log(modalId);
      document.getElementById(modalId).style.display = 'none';
    }
    async function updateApiKeys(inputId, displayId) {
    const newApiKey = document.getElementById(inputId).value;

    try {
      const response = await fetch('/admin/panel/updateApiKeys', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ [inputId]: newApiKey }),
      });

      if (!response.ok) {
        throw new Error(`Failed to update API key`);
      }

      document.getElementById(displayId).textContent = `Existing ${displayId === 'existing-telegram-api' ? 'Telegram' : 'Weather'} API Key: ${newApiKey}`;
      document.getElementById(inputId).value = '';
    } catch (error) {
      console.error('Error updating API key:', error);
    }
  }
  function blockUser(userId) {
      console.log("userId->",userId);
      fetch(`/admin/panel/blocked/${userId}`, { method: 'POST' })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Failed to block user with ID ${userId}`);
          }
          console.log(`User with ID ${userId} blocked successfully`);
          updateButton(userId, true);
          console.log("updateButton called")
        })
        .catch(error => {
          console.error(`Error blocking user with ID ${userId}:`, error);
        });
    }


    function unblockUser(userId) {
  fetch(`/admin/panel/unblock/${userId}`, { method: 'POST' })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Failed to unblock user with ID ${userId}`);
      }
      console.log(`User with ID ${userId} unblocked successfully`);
      updateButton(userId, false);
    })
    .catch(error => {
      console.error(`Error unblocking user with ID ${userId}:`, error);
    });
}

    function updateButton(userId, isBlocked) {
  const userButton = document.querySelector(`[data-user-id="${userId}"]`);
  console.log("userBtn->",userButton);
  if (userButton) {
    userButton.textContent = isBlocked ? 'Unblock' : 'Block';
    userButton.className = isBlocked ? 'unblock-btn' : 'block-btn';
    userButton.onclick = isBlocked ? () => unblockUser(userId) : () => blockUser(userId);
  }
}

async function getBlockedUsers() {
    try {
      const response = await fetch('/admin/panel/getBlockedUsers');
      const blockedUsers = await response.json();

      const blockedUsersModal = document.getElementById('blockedUsersModal');
      const modalBody = blockedUsersModal.querySelector('.modal-body');

      modalBody.innerHTML = '<h2>Blocked Users</h2>';

      if (blockedUsers.length > 0) {
        const userList = document.createElement('ul');

        blockedUsers.forEach((user) => {
          const listItem = document.createElement('li');
          listItem.className = 'blocked-user-item';

          const userIdSpan = document.createElement('span');
          userIdSpan.textContent = `User ID: ${user.userId}`;
          listItem.appendChild(userIdSpan);

          const unblockBtn = document.createElement('button');
          unblockBtn.textContent = 'Unblock';
          unblockBtn.className = 'unblock-btn';
          unblockBtn.onclick = async () => {
            await unblockUser(user.userId);
            listItem.remove();
          };

          listItem.appendChild(unblockBtn);
          userList.appendChild(listItem);
        });

        modalBody.appendChild(userList);
      } else {
        modalBody.innerHTML += '<p>No blocked users.</p>';
      }

    } catch (error) {
      console.error('Error fetching blocked users:', error);
    }
  }

 async function deleteUser(userId) {
      if (confirm('Are you sure you want to delete this user?')) {

        console.log("in delete user")
       await fetch(`/admin/panel/delete/${userId}`, { method: 'POST' })
          .then(response => {
            if (!response.ok) {
              throw new Error(`Failed to delete user with ID ${userId}`);
            }
            console.log(`User with ID ${userId} deleted successfully`);
            const userElement = document.querySelector(`[data-user-id="${userId}"]`);
            if (userElement) {
              userElement.remove();
            }
          })
          .catch(error => {
            console.error(`Error deleting user with ID ${userId}:`, error);
          });
      }
    }
  </script>

  <!-- ... (other HTML code) -->

</body>

</html>